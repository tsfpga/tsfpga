-- -----------------------------------------------------------------------------
-- This file is automatically generated by hdl-registers version 6.2.1-dev2.
-- Code generator VhdlRecordPackageGenerator version 1.0.0.
-- Generated 2024-12-30 15:17 from file regs_register_top_level.toml at commit 242d1974bf9d (local changes present).
-- Register hash fba3d99fc88234c570b46cc4db509307bad3423b.
-- -----------------------------------------------------------------------------

library ieee;
use ieee.fixed_pkg.all;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library reg_file;
use reg_file.reg_file_pkg.reg_t;

use work.register_top_level_regs_pkg.all;


package register_top_level_register_record_pkg is

  -- -----------------------------------------------------------------------------
  -- Record with correctly-typed members for each field in each register.
  -- Fields in the 'reg' register within the 'registers' register array as a record.
  type register_top_level_registers_reg_t is record
    field : register_top_level_registers_reg_field_t;
  end record;
  -- Default value for the 'reg' register within the 'registers' register array as a record.
  constant register_top_level_registers_reg_init : register_top_level_registers_reg_t := (
    field => register_top_level_registers_reg_field_init
  );
  -- Convert a record of the 'reg' register within the 'registers' register array to SLV.
  function to_slv(data : register_top_level_registers_reg_t) return reg_t;
  -- Convert an SLV register value to the record for the 'reg' register within the 'registers' register array.
  function to_register_top_level_registers_reg(data : reg_t) return register_top_level_registers_reg_t;

  -- -----------------------------------------------------------------------------
  -- Below is a record with correctly typed and ranged members for all registers, register arrays
  -- and fields that are in the 'up' direction.
  -- But first, records for the registers of each register array the are in the 'up' direction.
  -- Registers of the 'registers' array that are in the 'up' direction.
  type register_top_level_registers_up_t is record
    reg : register_top_level_registers_reg_t;
  end record;
  -- Default value of the above record.
  constant register_top_level_registers_up_init : register_top_level_registers_up_t := (
    reg => register_top_level_registers_reg_init
  );
  -- VHDL array of the above record, ranged per the length of the 'registers' register array.
  type register_top_level_registers_up_vec_t is array (0 to 19) of register_top_level_registers_up_t;

  -- Record with everything in the 'up' direction.
  type register_top_level_regs_up_t is record
    registers : register_top_level_registers_up_vec_t;
  end record;
  -- Default value of the above record.
  constant register_top_level_regs_up_init : register_top_level_regs_up_t := (
    registers => (others => register_top_level_registers_up_init)
  );
  -- Convert record with everything in the 'up' direction to SLV register list.
  function to_slv(data : register_top_level_regs_up_t) return register_top_level_regs_t;

  -- -----------------------------------------------------------------------------
  -- Below is a record with correctly typed and ranged members for all registers, register arrays
  -- and fields that are in the 'down' direction.
  -- But first, records for the registers of each register array the are in the 'down' direction.
  -- Registers of the 'registers' array that are in the 'down' direction.
  type register_top_level_registers_down_t is record
    reg : register_top_level_registers_reg_t;
  end record;
  -- Default value of the above record.
  constant register_top_level_registers_down_init : register_top_level_registers_down_t := (
    reg => register_top_level_registers_reg_init
  );
  -- VHDL array of the above record, ranged per the length of the 'registers' register array.
  type register_top_level_registers_down_vec_t is array (0 to 19) of register_top_level_registers_down_t;

  -- Record with everything in the 'down' direction.
  type register_top_level_regs_down_t is record
    registers : register_top_level_registers_down_vec_t;
  end record;
  -- Default value of the above record.
  constant register_top_level_regs_down_init : register_top_level_regs_down_t := (
    registers => (others => register_top_level_registers_down_init)
  );
  -- Convert SLV register list to record with everything in the 'down' direction.
  function to_register_top_level_regs_down(data : register_top_level_regs_t) return register_top_level_regs_down_t;

  -- ---------------------------------------------------------------------------
  -- Below is a record with a status bit for each readable register in the register list.
  -- It can be used for the 'reg_was_read' port of a register file wrapper.
  -- One status bit for each readable register in the 'registers' register array.
  type register_top_level_registers_was_read_t is record
    reg : std_ulogic;
  end record;
  -- Default value of the above record.
  constant register_top_level_registers_was_read_init : register_top_level_registers_was_read_t := (others => '0');
  -- Vector of the above record, ranged per the length of the 'registers' register array.
  type register_top_level_registers_was_read_vec_t is array (0 to 19) of register_top_level_registers_was_read_t;

  -- Combined status mask record for all readable register.
  type register_top_level_reg_was_read_t is record
    registers : register_top_level_registers_was_read_vec_t;
  end record;
  -- Default value for the above record.
  constant register_top_level_reg_was_read_init : register_top_level_reg_was_read_t := (
    registers => (others => register_top_level_registers_was_read_init)
  );
  -- Convert an SLV 'reg_was_read' from generic register file to the record above.
  function to_register_top_level_reg_was_read(
    data : register_top_level_reg_was_accessed_t
  ) return register_top_level_reg_was_read_t;

  -- ---------------------------------------------------------------------------
  -- Below is a record with a status bit for each writeable register in the register list.
  -- It can be used for the 'reg_was_written' port of a register file wrapper.
  -- One status bit for each writeable register in the 'registers' register array.
  type register_top_level_registers_was_written_t is record
    reg : std_ulogic;
  end record;
  -- Default value of the above record.
  constant register_top_level_registers_was_written_init : register_top_level_registers_was_written_t := (others => '0');
  -- Vector of the above record, ranged per the length of the 'registers' register array.
  type register_top_level_registers_was_written_vec_t is array (0 to 19) of register_top_level_registers_was_written_t;

  -- Combined status mask record for all writeable register.
  type register_top_level_reg_was_written_t is record
    registers : register_top_level_registers_was_written_vec_t;
  end record;
  -- Default value for the above record.
  constant register_top_level_reg_was_written_init : register_top_level_reg_was_written_t := (
    registers => (others => register_top_level_registers_was_written_init)
  );
  -- Convert an SLV 'reg_was_written' from generic register file to the record above.
  function to_register_top_level_reg_was_written(
    data : register_top_level_reg_was_accessed_t
  ) return register_top_level_reg_was_written_t;

end package;

package body register_top_level_register_record_pkg is

  function to_slv(data : register_top_level_registers_reg_t) return reg_t is
    variable result : reg_t := (others => '-');
  begin
    result(register_top_level_registers_reg_field) := std_ulogic_vector(data.field);

    return result;
  end function;

  function to_register_top_level_registers_reg(data : reg_t) return register_top_level_registers_reg_t is
    variable result : register_top_level_registers_reg_t := register_top_level_registers_reg_init;
  begin
    result.field := register_top_level_registers_reg_field_t(data(register_top_level_registers_reg_field));

    return result;
  end function;

  function to_slv(data : register_top_level_regs_up_t) return register_top_level_regs_t is
    variable result : register_top_level_regs_t := register_top_level_regs_init;
  begin
    result(register_top_level_registers_reg(0)) := to_slv(data.registers(0).reg);
    result(register_top_level_registers_reg(1)) := to_slv(data.registers(1).reg);
    result(register_top_level_registers_reg(2)) := to_slv(data.registers(2).reg);
    result(register_top_level_registers_reg(3)) := to_slv(data.registers(3).reg);
    result(register_top_level_registers_reg(4)) := to_slv(data.registers(4).reg);
    result(register_top_level_registers_reg(5)) := to_slv(data.registers(5).reg);
    result(register_top_level_registers_reg(6)) := to_slv(data.registers(6).reg);
    result(register_top_level_registers_reg(7)) := to_slv(data.registers(7).reg);
    result(register_top_level_registers_reg(8)) := to_slv(data.registers(8).reg);
    result(register_top_level_registers_reg(9)) := to_slv(data.registers(9).reg);
    result(register_top_level_registers_reg(10)) := to_slv(data.registers(10).reg);
    result(register_top_level_registers_reg(11)) := to_slv(data.registers(11).reg);
    result(register_top_level_registers_reg(12)) := to_slv(data.registers(12).reg);
    result(register_top_level_registers_reg(13)) := to_slv(data.registers(13).reg);
    result(register_top_level_registers_reg(14)) := to_slv(data.registers(14).reg);
    result(register_top_level_registers_reg(15)) := to_slv(data.registers(15).reg);
    result(register_top_level_registers_reg(16)) := to_slv(data.registers(16).reg);
    result(register_top_level_registers_reg(17)) := to_slv(data.registers(17).reg);
    result(register_top_level_registers_reg(18)) := to_slv(data.registers(18).reg);
    result(register_top_level_registers_reg(19)) := to_slv(data.registers(19).reg);

    return result;
  end function;

  function to_register_top_level_regs_down(data : register_top_level_regs_t) return register_top_level_regs_down_t is
    variable result : register_top_level_regs_down_t := register_top_level_regs_down_init;
  begin
    result.registers(0).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(0)));
    result.registers(1).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(1)));
    result.registers(2).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(2)));
    result.registers(3).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(3)));
    result.registers(4).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(4)));
    result.registers(5).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(5)));
    result.registers(6).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(6)));
    result.registers(7).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(7)));
    result.registers(8).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(8)));
    result.registers(9).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(9)));
    result.registers(10).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(10)));
    result.registers(11).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(11)));
    result.registers(12).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(12)));
    result.registers(13).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(13)));
    result.registers(14).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(14)));
    result.registers(15).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(15)));
    result.registers(16).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(16)));
    result.registers(17).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(17)));
    result.registers(18).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(18)));
    result.registers(19).reg := to_register_top_level_registers_reg(data(register_top_level_registers_reg(19)));

    return result;
  end function;

  function to_register_top_level_reg_was_read(
    data : register_top_level_reg_was_accessed_t
  ) return register_top_level_reg_was_read_t is
    variable result : register_top_level_reg_was_read_t := register_top_level_reg_was_read_init;
  begin
    result.registers(0).reg := data(register_top_level_registers_reg(array_index=>0));
    result.registers(1).reg := data(register_top_level_registers_reg(array_index=>1));
    result.registers(2).reg := data(register_top_level_registers_reg(array_index=>2));
    result.registers(3).reg := data(register_top_level_registers_reg(array_index=>3));
    result.registers(4).reg := data(register_top_level_registers_reg(array_index=>4));
    result.registers(5).reg := data(register_top_level_registers_reg(array_index=>5));
    result.registers(6).reg := data(register_top_level_registers_reg(array_index=>6));
    result.registers(7).reg := data(register_top_level_registers_reg(array_index=>7));
    result.registers(8).reg := data(register_top_level_registers_reg(array_index=>8));
    result.registers(9).reg := data(register_top_level_registers_reg(array_index=>9));
    result.registers(10).reg := data(register_top_level_registers_reg(array_index=>10));
    result.registers(11).reg := data(register_top_level_registers_reg(array_index=>11));
    result.registers(12).reg := data(register_top_level_registers_reg(array_index=>12));
    result.registers(13).reg := data(register_top_level_registers_reg(array_index=>13));
    result.registers(14).reg := data(register_top_level_registers_reg(array_index=>14));
    result.registers(15).reg := data(register_top_level_registers_reg(array_index=>15));
    result.registers(16).reg := data(register_top_level_registers_reg(array_index=>16));
    result.registers(17).reg := data(register_top_level_registers_reg(array_index=>17));
    result.registers(18).reg := data(register_top_level_registers_reg(array_index=>18));
    result.registers(19).reg := data(register_top_level_registers_reg(array_index=>19));

    return result;
  end function;

  function to_register_top_level_reg_was_written(
    data : register_top_level_reg_was_accessed_t
  ) return register_top_level_reg_was_written_t is
    variable result : register_top_level_reg_was_written_t := register_top_level_reg_was_written_init;
  begin
    result.registers(0).reg := data(register_top_level_registers_reg(array_index=>0));
    result.registers(1).reg := data(register_top_level_registers_reg(array_index=>1));
    result.registers(2).reg := data(register_top_level_registers_reg(array_index=>2));
    result.registers(3).reg := data(register_top_level_registers_reg(array_index=>3));
    result.registers(4).reg := data(register_top_level_registers_reg(array_index=>4));
    result.registers(5).reg := data(register_top_level_registers_reg(array_index=>5));
    result.registers(6).reg := data(register_top_level_registers_reg(array_index=>6));
    result.registers(7).reg := data(register_top_level_registers_reg(array_index=>7));
    result.registers(8).reg := data(register_top_level_registers_reg(array_index=>8));
    result.registers(9).reg := data(register_top_level_registers_reg(array_index=>9));
    result.registers(10).reg := data(register_top_level_registers_reg(array_index=>10));
    result.registers(11).reg := data(register_top_level_registers_reg(array_index=>11));
    result.registers(12).reg := data(register_top_level_registers_reg(array_index=>12));
    result.registers(13).reg := data(register_top_level_registers_reg(array_index=>13));
    result.registers(14).reg := data(register_top_level_registers_reg(array_index=>14));
    result.registers(15).reg := data(register_top_level_registers_reg(array_index=>15));
    result.registers(16).reg := data(register_top_level_registers_reg(array_index=>16));
    result.registers(17).reg := data(register_top_level_registers_reg(array_index=>17));
    result.registers(18).reg := data(register_top_level_registers_reg(array_index=>18));
    result.registers(19).reg := data(register_top_level_registers_reg(array_index=>19));

    return result;
  end function;

end package body;

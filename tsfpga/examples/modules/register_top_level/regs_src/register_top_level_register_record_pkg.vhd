-- -----------------------------------------------------------------------------
-- This file is automatically generated by hdl-registers version 6.2.1-dev2.
-- Code generator VhdlRecordPackageGenerator version 1.0.0.
-- Generated 2024-12-30 14:53 from file regs_register_top_level.toml at commit a88ea51b9e82.
-- Register hash 5389169bfaee4103dfc57327d36576428cd8e774.
-- -----------------------------------------------------------------------------

library ieee;
use ieee.fixed_pkg.all;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library reg_file;
use reg_file.reg_file_pkg.reg_t;

use work.register_top_level_regs_pkg.all;


package register_top_level_register_record_pkg is

  -- -----------------------------------------------------------------------------
  -- Record with correctly-typed members for each field in each register.
  -- Fields in the 'registers' register within the 'registers' register array as a record.
  type register_top_level_registers_registers_t is record
    field : register_top_level_registers_registers_field_t;
  end record;
  -- Default value for the 'registers' register within the 'registers' register array as a record.
  constant register_top_level_registers_registers_init : register_top_level_registers_registers_t := (
    field => register_top_level_registers_registers_field_init
  );
  -- Convert a record of the 'registers' register within the 'registers' register array to SLV.
  function to_slv(data : register_top_level_registers_registers_t) return reg_t;
  -- Convert an SLV register value to the record for the 'registers' register within the 'registers' register array.
  function to_register_top_level_registers_registers(data : reg_t) return register_top_level_registers_registers_t;

  -- -----------------------------------------------------------------------------
  -- Below is a record with correctly typed and ranged members for all registers, register arrays
  -- and fields that are in the 'up' direction.
  -- But first, records for the registers of each register array the are in the 'up' direction.
  -- Registers of the 'registers' array that are in the 'up' direction.
  type register_top_level_registers_up_t is record
    registers : register_top_level_registers_registers_t;
  end record;
  -- Default value of the above record.
  constant register_top_level_registers_up_init : register_top_level_registers_up_t := (
    registers => register_top_level_registers_registers_init
  );
  -- VHDL array of the above record, ranged per the length of the 'registers' register array.
  type register_top_level_registers_up_vec_t is array (0 to 19) of register_top_level_registers_up_t;

  -- Record with everything in the 'up' direction.
  type register_top_level_regs_up_t is record
    registers : register_top_level_registers_up_vec_t;
    status : reg_t;
    irq_status : reg_t;
  end record;
  -- Default value of the above record.
  constant register_top_level_regs_up_init : register_top_level_regs_up_t := (
    registers => (others => register_top_level_registers_up_init),
    status => (others => '0'),
    irq_status => (others => '0')
  );
  -- Convert record with everything in the 'up' direction to SLV register list.
  function to_slv(data : register_top_level_regs_up_t) return register_top_level_regs_t;

  -- -----------------------------------------------------------------------------
  -- Below is a record with correctly typed and ranged members for all registers, register arrays
  -- and fields that are in the 'down' direction.
  -- But first, records for the registers of each register array the are in the 'down' direction.
  -- Registers of the 'registers' array that are in the 'down' direction.
  type register_top_level_registers_down_t is record
    registers : register_top_level_registers_registers_t;
  end record;
  -- Default value of the above record.
  constant register_top_level_registers_down_init : register_top_level_registers_down_t := (
    registers => register_top_level_registers_registers_init
  );
  -- VHDL array of the above record, ranged per the length of the 'registers' register array.
  type register_top_level_registers_down_vec_t is array (0 to 19) of register_top_level_registers_down_t;

  -- Record with everything in the 'down' direction.
  type register_top_level_regs_down_t is record
    registers : register_top_level_registers_down_vec_t;
    config : reg_t;
    command : reg_t;
    irq_status : reg_t;
    irq_mask : reg_t;
  end record;
  -- Default value of the above record.
  constant register_top_level_regs_down_init : register_top_level_regs_down_t := (
    registers => (others => register_top_level_registers_down_init),
    config => (others => '0'),
    command => (others => '0'),
    irq_status => (others => '0'),
    irq_mask => (others => '0')
  );
  -- Convert SLV register list to record with everything in the 'down' direction.
  function to_register_top_level_regs_down(data : register_top_level_regs_t) return register_top_level_regs_down_t;

  -- ---------------------------------------------------------------------------
  -- Below is a record with a status bit for each readable register in the register list.
  -- It can be used for the 'reg_was_read' port of a register file wrapper.
  -- One status bit for each readable register in the 'registers' register array.
  type register_top_level_registers_was_read_t is record
    registers : std_ulogic;
  end record;
  -- Default value of the above record.
  constant register_top_level_registers_was_read_init : register_top_level_registers_was_read_t := (others => '0');
  -- Vector of the above record, ranged per the length of the 'registers' register array.
  type register_top_level_registers_was_read_vec_t is array (0 to 19) of register_top_level_registers_was_read_t;

  -- Combined status mask record for all readable register.
  type register_top_level_reg_was_read_t is record
    registers : register_top_level_registers_was_read_vec_t;
    config : std_ulogic;
    status : std_ulogic;
    irq_status : std_ulogic;
    irq_mask : std_ulogic;
  end record;
  -- Default value for the above record.
  constant register_top_level_reg_was_read_init : register_top_level_reg_was_read_t := (
    registers => (others => register_top_level_registers_was_read_init),
    others => '0'
  );
  -- Convert an SLV 'reg_was_read' from generic register file to the record above.
  function to_register_top_level_reg_was_read(
    data : register_top_level_reg_was_accessed_t
  ) return register_top_level_reg_was_read_t;

  -- ---------------------------------------------------------------------------
  -- Below is a record with a status bit for each writeable register in the register list.
  -- It can be used for the 'reg_was_written' port of a register file wrapper.
  -- One status bit for each writeable register in the 'registers' register array.
  type register_top_level_registers_was_written_t is record
    registers : std_ulogic;
  end record;
  -- Default value of the above record.
  constant register_top_level_registers_was_written_init : register_top_level_registers_was_written_t := (others => '0');
  -- Vector of the above record, ranged per the length of the 'registers' register array.
  type register_top_level_registers_was_written_vec_t is array (0 to 19) of register_top_level_registers_was_written_t;

  -- Combined status mask record for all writeable register.
  type register_top_level_reg_was_written_t is record
    registers : register_top_level_registers_was_written_vec_t;
    config : std_ulogic;
    command : std_ulogic;
    irq_status : std_ulogic;
    irq_mask : std_ulogic;
  end record;
  -- Default value for the above record.
  constant register_top_level_reg_was_written_init : register_top_level_reg_was_written_t := (
    registers => (others => register_top_level_registers_was_written_init),
    others => '0'
  );
  -- Convert an SLV 'reg_was_written' from generic register file to the record above.
  function to_register_top_level_reg_was_written(
    data : register_top_level_reg_was_accessed_t
  ) return register_top_level_reg_was_written_t;

end package;

package body register_top_level_register_record_pkg is

  function to_slv(data : register_top_level_registers_registers_t) return reg_t is
    variable result : reg_t := (others => '-');
  begin
    result(register_top_level_registers_registers_field) := std_ulogic_vector(data.field);

    return result;
  end function;

  function to_register_top_level_registers_registers(data : reg_t) return register_top_level_registers_registers_t is
    variable result : register_top_level_registers_registers_t := register_top_level_registers_registers_init;
  begin
    result.field := register_top_level_registers_registers_field_t(data(register_top_level_registers_registers_field));

    return result;
  end function;

  function to_slv(data : register_top_level_regs_up_t) return register_top_level_regs_t is
    variable result : register_top_level_regs_t := register_top_level_regs_init;
  begin
    result(register_top_level_status) := data.status;
    result(register_top_level_irq_status) := data.irq_status;
    result(register_top_level_registers_registers(0)) := to_slv(data.registers(0).registers);
    result(register_top_level_registers_registers(1)) := to_slv(data.registers(1).registers);
    result(register_top_level_registers_registers(2)) := to_slv(data.registers(2).registers);
    result(register_top_level_registers_registers(3)) := to_slv(data.registers(3).registers);
    result(register_top_level_registers_registers(4)) := to_slv(data.registers(4).registers);
    result(register_top_level_registers_registers(5)) := to_slv(data.registers(5).registers);
    result(register_top_level_registers_registers(6)) := to_slv(data.registers(6).registers);
    result(register_top_level_registers_registers(7)) := to_slv(data.registers(7).registers);
    result(register_top_level_registers_registers(8)) := to_slv(data.registers(8).registers);
    result(register_top_level_registers_registers(9)) := to_slv(data.registers(9).registers);
    result(register_top_level_registers_registers(10)) := to_slv(data.registers(10).registers);
    result(register_top_level_registers_registers(11)) := to_slv(data.registers(11).registers);
    result(register_top_level_registers_registers(12)) := to_slv(data.registers(12).registers);
    result(register_top_level_registers_registers(13)) := to_slv(data.registers(13).registers);
    result(register_top_level_registers_registers(14)) := to_slv(data.registers(14).registers);
    result(register_top_level_registers_registers(15)) := to_slv(data.registers(15).registers);
    result(register_top_level_registers_registers(16)) := to_slv(data.registers(16).registers);
    result(register_top_level_registers_registers(17)) := to_slv(data.registers(17).registers);
    result(register_top_level_registers_registers(18)) := to_slv(data.registers(18).registers);
    result(register_top_level_registers_registers(19)) := to_slv(data.registers(19).registers);

    return result;
  end function;

  function to_register_top_level_regs_down(data : register_top_level_regs_t) return register_top_level_regs_down_t is
    variable result : register_top_level_regs_down_t := register_top_level_regs_down_init;
  begin
    result.config := data(register_top_level_config);
    result.command := data(register_top_level_command);
    result.irq_status := data(register_top_level_irq_status);
    result.irq_mask := data(register_top_level_irq_mask);
    result.registers(0).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(0)));
    result.registers(1).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(1)));
    result.registers(2).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(2)));
    result.registers(3).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(3)));
    result.registers(4).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(4)));
    result.registers(5).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(5)));
    result.registers(6).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(6)));
    result.registers(7).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(7)));
    result.registers(8).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(8)));
    result.registers(9).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(9)));
    result.registers(10).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(10)));
    result.registers(11).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(11)));
    result.registers(12).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(12)));
    result.registers(13).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(13)));
    result.registers(14).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(14)));
    result.registers(15).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(15)));
    result.registers(16).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(16)));
    result.registers(17).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(17)));
    result.registers(18).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(18)));
    result.registers(19).registers := to_register_top_level_registers_registers(data(register_top_level_registers_registers(19)));

    return result;
  end function;

  function to_register_top_level_reg_was_read(
    data : register_top_level_reg_was_accessed_t
  ) return register_top_level_reg_was_read_t is
    variable result : register_top_level_reg_was_read_t := register_top_level_reg_was_read_init;
  begin
    result.config := data(register_top_level_config);
    result.status := data(register_top_level_status);
    result.irq_status := data(register_top_level_irq_status);
    result.irq_mask := data(register_top_level_irq_mask);
    result.registers(0).registers := data(register_top_level_registers_registers(array_index=>0));
    result.registers(1).registers := data(register_top_level_registers_registers(array_index=>1));
    result.registers(2).registers := data(register_top_level_registers_registers(array_index=>2));
    result.registers(3).registers := data(register_top_level_registers_registers(array_index=>3));
    result.registers(4).registers := data(register_top_level_registers_registers(array_index=>4));
    result.registers(5).registers := data(register_top_level_registers_registers(array_index=>5));
    result.registers(6).registers := data(register_top_level_registers_registers(array_index=>6));
    result.registers(7).registers := data(register_top_level_registers_registers(array_index=>7));
    result.registers(8).registers := data(register_top_level_registers_registers(array_index=>8));
    result.registers(9).registers := data(register_top_level_registers_registers(array_index=>9));
    result.registers(10).registers := data(register_top_level_registers_registers(array_index=>10));
    result.registers(11).registers := data(register_top_level_registers_registers(array_index=>11));
    result.registers(12).registers := data(register_top_level_registers_registers(array_index=>12));
    result.registers(13).registers := data(register_top_level_registers_registers(array_index=>13));
    result.registers(14).registers := data(register_top_level_registers_registers(array_index=>14));
    result.registers(15).registers := data(register_top_level_registers_registers(array_index=>15));
    result.registers(16).registers := data(register_top_level_registers_registers(array_index=>16));
    result.registers(17).registers := data(register_top_level_registers_registers(array_index=>17));
    result.registers(18).registers := data(register_top_level_registers_registers(array_index=>18));
    result.registers(19).registers := data(register_top_level_registers_registers(array_index=>19));

    return result;
  end function;

  function to_register_top_level_reg_was_written(
    data : register_top_level_reg_was_accessed_t
  ) return register_top_level_reg_was_written_t is
    variable result : register_top_level_reg_was_written_t := register_top_level_reg_was_written_init;
  begin
    result.config := data(register_top_level_config);
    result.command := data(register_top_level_command);
    result.irq_status := data(register_top_level_irq_status);
    result.irq_mask := data(register_top_level_irq_mask);
    result.registers(0).registers := data(register_top_level_registers_registers(array_index=>0));
    result.registers(1).registers := data(register_top_level_registers_registers(array_index=>1));
    result.registers(2).registers := data(register_top_level_registers_registers(array_index=>2));
    result.registers(3).registers := data(register_top_level_registers_registers(array_index=>3));
    result.registers(4).registers := data(register_top_level_registers_registers(array_index=>4));
    result.registers(5).registers := data(register_top_level_registers_registers(array_index=>5));
    result.registers(6).registers := data(register_top_level_registers_registers(array_index=>6));
    result.registers(7).registers := data(register_top_level_registers_registers(array_index=>7));
    result.registers(8).registers := data(register_top_level_registers_registers(array_index=>8));
    result.registers(9).registers := data(register_top_level_registers_registers(array_index=>9));
    result.registers(10).registers := data(register_top_level_registers_registers(array_index=>10));
    result.registers(11).registers := data(register_top_level_registers_registers(array_index=>11));
    result.registers(12).registers := data(register_top_level_registers_registers(array_index=>12));
    result.registers(13).registers := data(register_top_level_registers_registers(array_index=>13));
    result.registers(14).registers := data(register_top_level_registers_registers(array_index=>14));
    result.registers(15).registers := data(register_top_level_registers_registers(array_index=>15));
    result.registers(16).registers := data(register_top_level_registers_registers(array_index=>16));
    result.registers(17).registers := data(register_top_level_registers_registers(array_index=>17));
    result.registers(18).registers := data(register_top_level_registers_registers(array_index=>18));
    result.registers(19).registers := data(register_top_level_registers_registers(array_index=>19));

    return result;
  end function;

end package body;

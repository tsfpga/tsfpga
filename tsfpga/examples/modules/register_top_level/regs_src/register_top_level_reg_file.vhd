-- -----------------------------------------------------------------------------
-- This file is automatically generated by hdl-registers version 6.2.1-dev2.
-- Code generator VhdlAxiLiteWrapperGenerator version 1.0.0.
-- Generated 2024-12-30 14:53 from file regs_register_top_level.toml at commit a88ea51b9e82.
-- Register hash 5389169bfaee4103dfc57327d36576428cd8e774.
-- -----------------------------------------------------------------------------

-- -----------------------------------------------------------------------------
-- AXI-Lite register file for the 'register_top_level' module registers.
--
-- Is a wrapper around the generic AXI-Lite register file from hdl-modules:
-- * https://hdl-modules.com/modules/reg_file/reg_file.html#axi-lite-reg-file-vhd
-- * https://github.com/hdl-modules/hdl-modules/blob/main/modules/reg_file/src/axi_lite_reg_file.vhd
--
-- Sets correct generics, and performs conversion to the easy-to-use register record types.
-- -----------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;

library axi_lite;
use axi_lite.axi_lite_pkg.all;

library reg_file;
use reg_file.reg_file_pkg.all;

use work.register_top_level_regs_pkg.all;
use work.register_top_level_register_record_pkg.all;


entity register_top_level_reg_file is
  port (
    clk : in std_ulogic;
    --# {}
    --# Register control bus.
    axi_lite_m2s : in axi_lite_m2s_t;
    axi_lite_s2m : out axi_lite_s2m_t := axi_lite_s2m_init;
    --# {}
    -- Register values.
    regs_up : in register_top_level_regs_up_t := register_top_level_regs_up_init;
    regs_down : out register_top_level_regs_down_t := register_top_level_regs_down_init;
    --# {}
    -- Each bit is pulsed for one cycle when the corresponding register is read/written.
    reg_was_read : out register_top_level_reg_was_read_t := register_top_level_reg_was_read_init;
    reg_was_written : out register_top_level_reg_was_written_t := register_top_level_reg_was_written_init
  );
end entity;

architecture a of register_top_level_reg_file is

  signal regs_up_slv, regs_down_slv : register_top_level_regs_t := register_top_level_regs_init;

  signal reg_was_read_slv, reg_was_written_slv : register_top_level_reg_was_accessed_t := (
    others => '0'
  );

begin

  ------------------------------------------------------------------------------
  -- Instantiate the generic AXI-Lite register file from
  -- * https://hdl-modules.com/modules/reg_file/reg_file.html#axi-lite-reg-file-vhd
  -- * https://github.com/hdl-modules/hdl-modules/blob/main/modules/reg_file/src/axi_lite_reg_file.vhd
  axi_lite_reg_file_inst : entity reg_file.axi_lite_reg_file
    generic map (
      regs => register_top_level_reg_map,
      default_values => register_top_level_regs_init
    )
    port map(
      clk => clk,
      --
      axi_lite_m2s => axi_lite_m2s,
      axi_lite_s2m => axi_lite_s2m,
      --
      regs_up => regs_up_slv,
      regs_down => regs_down_slv,
      --
      reg_was_read => reg_was_read_slv,
      reg_was_written => reg_was_written_slv
    );


  ------------------------------------------------------------------------------
  -- Combinatorially convert the register record to a list of SLV values that can be handled
  -- by the generic register file implementation.
  assign_regs_up : process(regs_up)
  begin
    regs_up_slv <= to_slv(regs_up);
  end process;


  ------------------------------------------------------------------------------
  -- Combinatorially convert the list of SLV values from the generic register file into the record
  -- we want to use in our application.
  assign_regs_down : process(regs_down_slv)
  begin
    regs_down <= to_register_top_level_regs_down(regs_down_slv);
  end process;


  ------------------------------------------------------------------------------
  -- Combinatorially convert status mask to a record where only the applicable registers are present.
  assign_reg_was_read : process(reg_was_read_slv)
  begin
    reg_was_read <= to_register_top_level_reg_was_read(reg_was_read_slv);
  end process;


  ------------------------------------------------------------------------------
  -- Combinatorially convert status mask to a record where only the applicable registers are present.
  assign_reg_was_written : process(reg_was_written_slv)
  begin
    reg_was_written <= to_register_top_level_reg_was_written(reg_was_written_slv);
  end process;

end architecture;

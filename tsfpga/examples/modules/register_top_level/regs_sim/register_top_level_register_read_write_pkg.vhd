-- -----------------------------------------------------------------------------
-- This file is automatically generated by hdl-registers version 6.2.1-dev2.
-- Code generator VhdlSimulationReadWritePackageGenerator version 1.1.0.
-- Generated 2024-12-30 14:53 from file regs_register_top_level.toml at commit a88ea51b9e82.
-- Register hash 5389169bfaee4103dfc57327d36576428cd8e774.
-- -----------------------------------------------------------------------------

library ieee;
use ieee.numeric_std.all;
use ieee.std_logic_1164.all;

library vunit_lib;
use vunit_lib.bus_master_pkg.bus_master_t;
use vunit_lib.bus_master_pkg.read_bus;
use vunit_lib.bus_master_pkg.write_bus;
use vunit_lib.com_types_pkg.network_t;

library common;
use common.addr_pkg.addr_t;
use common.addr_pkg.addr_width;

library reg_file;
use reg_file.reg_file_pkg.reg_t;
use reg_file.reg_file_pkg.reg_width;
use reg_file.reg_operations_pkg.regs_bus_master;

use work.register_top_level_regs_pkg.all;
use work.register_top_level_register_record_pkg.all;


package register_top_level_register_read_write_pkg is

  -- ---------------------------------------------------------------------------
  -- Read the 'config' register as a plain 'reg_t'.
  procedure read_register_top_level_config(
    signal net : inout network_t;
    value : out reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Read the 'config' register as an 'integer'.
  procedure read_register_top_level_config(
    signal net : inout network_t;
    value : out integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Write the 'config' register as an 'integer'.
  procedure write_register_top_level_config(
    signal net : inout network_t;
    value : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Write the 'config' register as a plain 'reg_t'.
  procedure write_register_top_level_config(
    signal net : inout network_t;
    value : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Write the 'command' register as an 'integer'.
  procedure write_register_top_level_command(
    signal net : inout network_t;
    value : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Write the 'command' register as a plain 'reg_t'.
  procedure write_register_top_level_command(
    signal net : inout network_t;
    value : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Read the 'status' register as a plain 'reg_t'.
  procedure read_register_top_level_status(
    signal net : inout network_t;
    value : out reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Read the 'status' register as an 'integer'.
  procedure read_register_top_level_status(
    signal net : inout network_t;
    value : out integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Read the 'irq_status' register as a plain 'reg_t'.
  procedure read_register_top_level_irq_status(
    signal net : inout network_t;
    value : out reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Read the 'irq_status' register as an 'integer'.
  procedure read_register_top_level_irq_status(
    signal net : inout network_t;
    value : out integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Write the 'irq_status' register as an 'integer'.
  procedure write_register_top_level_irq_status(
    signal net : inout network_t;
    value : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Write the 'irq_status' register as a plain 'reg_t'.
  procedure write_register_top_level_irq_status(
    signal net : inout network_t;
    value : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Read the 'irq_mask' register as a plain 'reg_t'.
  procedure read_register_top_level_irq_mask(
    signal net : inout network_t;
    value : out reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Read the 'irq_mask' register as an 'integer'.
  procedure read_register_top_level_irq_mask(
    signal net : inout network_t;
    value : out integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Write the 'irq_mask' register as an 'integer'.
  procedure write_register_top_level_irq_mask(
    signal net : inout network_t;
    value : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Write the 'irq_mask' register as a plain 'reg_t'.
  procedure write_register_top_level_irq_mask(
    signal net : inout network_t;
    value : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Read the 'registers' register within the 'registers' register array as a plain 'reg_t'.
  procedure read_register_top_level_registers_registers(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : out reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Read the 'registers' register within the 'registers' register array as an 'integer'.
  procedure read_register_top_level_registers_registers(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : out integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Read the 'registers' register within the 'registers' register array.
  procedure read_register_top_level_registers_registers(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : out register_top_level_registers_registers_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Read the 'field' field in the 'registers' register within the 'registers' register array.
  procedure read_register_top_level_registers_registers_field(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : out register_top_level_registers_registers_field_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Read the 'field' field in the 'registers' register within the 'registers' register array as an 'integer'.
  procedure read_register_top_level_registers_registers_field(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : out integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Write the 'registers' register within the 'registers' register array as an 'integer'.
  procedure write_register_top_level_registers_registers(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Write the 'registers' register within the 'registers' register array.
  procedure write_register_top_level_registers_registers(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : in register_top_level_registers_registers_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Write the 'field' field in the 'registers' register within the 'registers' register array.
  -- Will write the whole register, with the field set to the 
  -- supplied 'value' and everything else set to default.
  procedure write_register_top_level_registers_registers_field(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : in register_top_level_registers_registers_field_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );

  -- Write the 'field' field in the 'registers' register within the 'registers' register array as an 'integer'.
  -- Will write the whole register, with the field set to the 
  -- supplied 'value' and everything else set to default.
  procedure write_register_top_level_registers_registers_field(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  );
  -- ---------------------------------------------------------------------------

end package;

package body register_top_level_register_read_write_pkg is

  -- ---------------------------------------------------------------------------
  -- Read the 'config' register as a plain 'reg_t'.
  procedure read_register_top_level_config(
    signal net : inout network_t;
    value : out reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_config;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    variable reg_value : reg_t := (others => '0');
  begin
    read_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
    value := reg_value;
  end procedure;

  -- Read the 'config' register as an 'integer'.
  procedure read_register_top_level_config(
    signal net : inout network_t;
    value : out integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_config;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    variable reg_value : reg_t := (others => '0');
  begin
    read_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
    value := to_integer(unsigned(reg_value));
  end procedure;

  -- Write the 'config' register as an 'integer'.
  procedure write_register_top_level_config(
    signal net : inout network_t;
    value : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_config;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    constant reg_value : reg_t := std_ulogic_vector(to_unsigned(value, reg_width));
  begin
    write_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
  end procedure;

  -- Write the 'config' register as a plain 'reg_t'.
  procedure write_register_top_level_config(
    signal net : inout network_t;
    value : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_config;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    constant reg_value : reg_t := value;
  begin
    write_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
  end procedure;
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Write the 'command' register as an 'integer'.
  procedure write_register_top_level_command(
    signal net : inout network_t;
    value : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_command;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    constant reg_value : reg_t := std_ulogic_vector(to_unsigned(value, reg_width));
  begin
    write_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
  end procedure;

  -- Write the 'command' register as a plain 'reg_t'.
  procedure write_register_top_level_command(
    signal net : inout network_t;
    value : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_command;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    constant reg_value : reg_t := value;
  begin
    write_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
  end procedure;
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Read the 'status' register as a plain 'reg_t'.
  procedure read_register_top_level_status(
    signal net : inout network_t;
    value : out reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_status;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    variable reg_value : reg_t := (others => '0');
  begin
    read_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
    value := reg_value;
  end procedure;

  -- Read the 'status' register as an 'integer'.
  procedure read_register_top_level_status(
    signal net : inout network_t;
    value : out integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_status;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    variable reg_value : reg_t := (others => '0');
  begin
    read_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
    value := to_integer(unsigned(reg_value));
  end procedure;
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Read the 'irq_status' register as a plain 'reg_t'.
  procedure read_register_top_level_irq_status(
    signal net : inout network_t;
    value : out reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_irq_status;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    variable reg_value : reg_t := (others => '0');
  begin
    read_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
    value := reg_value;
  end procedure;

  -- Read the 'irq_status' register as an 'integer'.
  procedure read_register_top_level_irq_status(
    signal net : inout network_t;
    value : out integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_irq_status;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    variable reg_value : reg_t := (others => '0');
  begin
    read_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
    value := to_integer(unsigned(reg_value));
  end procedure;

  -- Write the 'irq_status' register as an 'integer'.
  procedure write_register_top_level_irq_status(
    signal net : inout network_t;
    value : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_irq_status;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    constant reg_value : reg_t := std_ulogic_vector(to_unsigned(value, reg_width));
  begin
    write_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
  end procedure;

  -- Write the 'irq_status' register as a plain 'reg_t'.
  procedure write_register_top_level_irq_status(
    signal net : inout network_t;
    value : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_irq_status;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    constant reg_value : reg_t := value;
  begin
    write_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
  end procedure;
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Read the 'irq_mask' register as a plain 'reg_t'.
  procedure read_register_top_level_irq_mask(
    signal net : inout network_t;
    value : out reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_irq_mask;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    variable reg_value : reg_t := (others => '0');
  begin
    read_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
    value := reg_value;
  end procedure;

  -- Read the 'irq_mask' register as an 'integer'.
  procedure read_register_top_level_irq_mask(
    signal net : inout network_t;
    value : out integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_irq_mask;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    variable reg_value : reg_t := (others => '0');
  begin
    read_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
    value := to_integer(unsigned(reg_value));
  end procedure;

  -- Write the 'irq_mask' register as an 'integer'.
  procedure write_register_top_level_irq_mask(
    signal net : inout network_t;
    value : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_irq_mask;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    constant reg_value : reg_t := std_ulogic_vector(to_unsigned(value, reg_width));
  begin
    write_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
  end procedure;

  -- Write the 'irq_mask' register as a plain 'reg_t'.
  procedure write_register_top_level_irq_mask(
    signal net : inout network_t;
    value : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_irq_mask;
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    constant reg_value : reg_t := value;
  begin
    write_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
  end procedure;
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Read the 'registers' register within the 'registers' register array as a plain 'reg_t'.
  procedure read_register_top_level_registers_registers(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : out reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_registers_registers(array_index=>array_index);
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    variable reg_value : reg_t := (others => '0');
  begin
    read_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
    value := reg_value;
  end procedure;

  -- Read the 'registers' register within the 'registers' register array as an 'integer'.
  procedure read_register_top_level_registers_registers(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : out integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_registers_registers(array_index=>array_index);
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    variable reg_value : reg_t := (others => '0');
  begin
    read_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
    value := to_integer(unsigned(reg_value));
  end procedure;

  -- Read the 'registers' register within the 'registers' register array.
  procedure read_register_top_level_registers_registers(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : out register_top_level_registers_registers_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_registers_registers(array_index=>array_index);
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    variable reg_value : reg_t := (others => '0');
  begin
    read_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
    value := to_register_top_level_registers_registers(reg_value);
  end procedure;

  -- Read the 'field' field in the 'registers' register within the 'registers' register array.
  procedure read_register_top_level_registers_registers_field(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : out register_top_level_registers_registers_field_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    variable reg_value : register_top_level_registers_registers_t := register_top_level_registers_registers_init;
  begin
    read_register_top_level_registers_registers(
      net => net,
      array_index => array_index,
      value => reg_value,
      base_address => base_address,
      bus_handle => bus_handle
    );
    value := reg_value.field;
  end procedure;

  -- Read the 'field' field in the 'registers' register within the 'registers' register array as an 'integer'.
  procedure read_register_top_level_registers_registers_field(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : out integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    variable reg_value : register_top_level_registers_registers_t := register_top_level_registers_registers_init;
  begin
    read_register_top_level_registers_registers(
      net => net,
      array_index => array_index,
      value => reg_value,
      base_address => base_address,
      bus_handle => bus_handle
    );
    value := to_integer(reg_value.field);
  end procedure;

  -- Write the 'registers' register within the 'registers' register array as an 'integer'.
  procedure write_register_top_level_registers_registers(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_registers_registers(array_index=>array_index);
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    constant reg_value : reg_t := std_ulogic_vector(to_unsigned(value, reg_width));
  begin
    write_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
  end procedure;

  -- Write the 'registers' register within the 'registers' register array.
  procedure write_register_top_level_registers_registers(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : in register_top_level_registers_registers_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    constant reg_index : register_top_level_reg_range := register_top_level_registers_registers(array_index=>array_index);
    constant reg_address : addr_t := base_address + to_unsigned(4 * reg_index, addr_width);
    constant reg_value : reg_t := to_slv(value);
  begin
    write_bus(
      net => net,
      bus_handle => bus_handle,
      address => std_logic_vector(reg_address),
      data => reg_value
    );
  end procedure;

  -- Write the 'field' field in the 'registers' register within the 'registers' register array.
  -- Will write the whole register, with the field set to the 
  -- supplied 'value' and everything else set to default.
  procedure write_register_top_level_registers_registers_field(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : in register_top_level_registers_registers_field_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    variable reg_value : register_top_level_registers_registers_t := register_top_level_registers_registers_init;
  begin
    reg_value.field := value;

    write_register_top_level_registers_registers(
      net => net,
      array_index => array_index,
      value => reg_value,
      base_address => base_address,
      bus_handle => bus_handle
    );
  end procedure;

  -- Write the 'field' field in the 'registers' register within the 'registers' register array as an 'integer'.
  -- Will write the whole register, with the field set to the 
  -- supplied 'value' and everything else set to default.
  procedure write_register_top_level_registers_registers_field(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    value : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master
  ) is
    variable reg_value : register_top_level_registers_registers_t := register_top_level_registers_registers_init;
  begin
    reg_value.field := to_unsigned(value, register_top_level_registers_registers_field_width);

    write_register_top_level_registers_registers(
      net => net,
      array_index => array_index,
      value => reg_value,
      base_address => base_address,
      bus_handle => bus_handle
    );
  end procedure;
  -- ---------------------------------------------------------------------------

end package body;

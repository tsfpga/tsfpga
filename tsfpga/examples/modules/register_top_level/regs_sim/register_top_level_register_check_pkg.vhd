-- -----------------------------------------------------------------------------
-- This file is automatically generated by hdl-registers version 6.2.1-dev2.
-- Code generator VhdlSimulationCheckPackageGenerator version 1.2.0.
-- Generated 2024-12-30 14:53 from file regs_register_top_level.toml at commit a88ea51b9e82.
-- Register hash 5389169bfaee4103dfc57327d36576428cd8e774.
-- -----------------------------------------------------------------------------

library ieee;
use ieee.fixed_pkg.all;
use ieee.numeric_std.all;
use ieee.std_logic_1164.all;

library vunit_lib;
use vunit_lib.bus_master_pkg.bus_master_t;
use vunit_lib.check_pkg.all;
use vunit_lib.checker_pkg.all;
use vunit_lib.com_types_pkg.network_t;
use vunit_lib.string_ops.hex_image;

library common;
use common.addr_pkg.addr_t;

library reg_file;
use reg_file.reg_file_pkg.reg_t;
use reg_file.reg_operations_pkg.regs_bus_master;

use work.register_top_level_register_read_write_pkg.all;
use work.register_top_level_register_record_pkg.all;
use work.register_top_level_regs_pkg.all;


package register_top_level_register_check_pkg is

  -- ---------------------------------------------------------------------------
  -- Check that the current value of the 'config' register
  -- equals the given 'expected' value as a plain SLV casted to integer.
  procedure check_register_top_level_config_equal(
    signal net : inout network_t;
    expected : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  );

  -- Check that the current value of the 'config' register
  -- equals the given 'expected' value as a plain SLV.
  procedure check_register_top_level_config_equal(
    signal net : inout network_t;
    expected : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  );
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Check that the current value of the 'status' register
  -- equals the given 'expected' value as a plain SLV casted to integer.
  procedure check_register_top_level_status_equal(
    signal net : inout network_t;
    expected : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  );

  -- Check that the current value of the 'status' register
  -- equals the given 'expected' value as a plain SLV.
  procedure check_register_top_level_status_equal(
    signal net : inout network_t;
    expected : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  );
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Check that the current value of the 'irq_status' register
  -- equals the given 'expected' value as a plain SLV casted to integer.
  procedure check_register_top_level_irq_status_equal(
    signal net : inout network_t;
    expected : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  );

  -- Check that the current value of the 'irq_status' register
  -- equals the given 'expected' value as a plain SLV.
  procedure check_register_top_level_irq_status_equal(
    signal net : inout network_t;
    expected : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  );
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Check that the current value of the 'irq_mask' register
  -- equals the given 'expected' value as a plain SLV casted to integer.
  procedure check_register_top_level_irq_mask_equal(
    signal net : inout network_t;
    expected : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  );

  -- Check that the current value of the 'irq_mask' register
  -- equals the given 'expected' value as a plain SLV.
  procedure check_register_top_level_irq_mask_equal(
    signal net : inout network_t;
    expected : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  );
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Check that the current value of the 'registers' register within the 'registers' register array
  -- equals the given 'expected' value as a plain SLV casted to integer.
  procedure check_register_top_level_registers_registers_equal(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    expected : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  );

  -- Check that the current value of the 'registers' register within the 'registers' register array
  -- equals the given 'expected' value.
  procedure check_register_top_level_registers_registers_equal(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    expected : in register_top_level_registers_registers_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  );

  -- Check that the current value of the 'field' field in the 'registers' register within the 'registers' register array
  -- equals the given 'expected' value.
  procedure check_register_top_level_registers_registers_field_equal(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    expected : in register_top_level_registers_registers_field_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  );
  -- ---------------------------------------------------------------------------

end package;

package body register_top_level_register_check_pkg is

  -- ---------------------------------------------------------------------------
  -- Check that the current value of the 'config' register
  -- equals the given 'expected' value as a plain SLV casted to integer.
  procedure check_register_top_level_config_equal(
    signal net : inout network_t;
    expected : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  ) is
    constant register_array_message : string := "";
    function base_address_message return string is
    begin
      if base_address /= 0 then
        return " (at base address " & hex_image(std_logic_vector(base_address)) & ")";
      end if;

      return "";
    end function;
    constant base_message : string := (
      "Checking the 'config' register"
      & register_array_message
      & base_address_message
      & "."
    );
    function get_message return string is
    begin
      if message = "" then
        return base_message;
      end if;

      return base_message & " " & message & ".";
    end function;

    variable got : integer;
  begin
    read_register_top_level_config(
      net => net,
      value => got,
      base_address => base_address,
      bus_handle => bus_handle
    );

    check_equal(got=>got, expected=>expected, msg=>get_message);
  end procedure;

  -- Check that the current value of the 'config' register
  -- equals the given 'expected' value as a plain SLV.
  procedure check_register_top_level_config_equal(
    signal net : inout network_t;
    expected : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  ) is
    constant register_array_message : string := "";
    function base_address_message return string is
    begin
      if base_address /= 0 then
        return " (at base address " & hex_image(std_logic_vector(base_address)) & ")";
      end if;

      return "";
    end function;
    constant base_message : string := (
      "Checking the 'config' register"
      & register_array_message
      & base_address_message
      & "."
    );
    function get_message return string is
    begin
      if message = "" then
        return base_message;
      end if;

      return base_message & " " & message & ".";
    end function;

    variable got : reg_t;
  begin
    read_register_top_level_config(
      net => net,
      value => got,
      base_address => base_address,
      bus_handle => bus_handle
    );

    check_equal(got=>got, expected=>expected, msg=>get_message);
  end procedure;
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Check that the current value of the 'status' register
  -- equals the given 'expected' value as a plain SLV casted to integer.
  procedure check_register_top_level_status_equal(
    signal net : inout network_t;
    expected : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  ) is
    constant register_array_message : string := "";
    function base_address_message return string is
    begin
      if base_address /= 0 then
        return " (at base address " & hex_image(std_logic_vector(base_address)) & ")";
      end if;

      return "";
    end function;
    constant base_message : string := (
      "Checking the 'status' register"
      & register_array_message
      & base_address_message
      & "."
    );
    function get_message return string is
    begin
      if message = "" then
        return base_message;
      end if;

      return base_message & " " & message & ".";
    end function;

    variable got : integer;
  begin
    read_register_top_level_status(
      net => net,
      value => got,
      base_address => base_address,
      bus_handle => bus_handle
    );

    check_equal(got=>got, expected=>expected, msg=>get_message);
  end procedure;

  -- Check that the current value of the 'status' register
  -- equals the given 'expected' value as a plain SLV.
  procedure check_register_top_level_status_equal(
    signal net : inout network_t;
    expected : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  ) is
    constant register_array_message : string := "";
    function base_address_message return string is
    begin
      if base_address /= 0 then
        return " (at base address " & hex_image(std_logic_vector(base_address)) & ")";
      end if;

      return "";
    end function;
    constant base_message : string := (
      "Checking the 'status' register"
      & register_array_message
      & base_address_message
      & "."
    );
    function get_message return string is
    begin
      if message = "" then
        return base_message;
      end if;

      return base_message & " " & message & ".";
    end function;

    variable got : reg_t;
  begin
    read_register_top_level_status(
      net => net,
      value => got,
      base_address => base_address,
      bus_handle => bus_handle
    );

    check_equal(got=>got, expected=>expected, msg=>get_message);
  end procedure;
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Check that the current value of the 'irq_status' register
  -- equals the given 'expected' value as a plain SLV casted to integer.
  procedure check_register_top_level_irq_status_equal(
    signal net : inout network_t;
    expected : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  ) is
    constant register_array_message : string := "";
    function base_address_message return string is
    begin
      if base_address /= 0 then
        return " (at base address " & hex_image(std_logic_vector(base_address)) & ")";
      end if;

      return "";
    end function;
    constant base_message : string := (
      "Checking the 'irq_status' register"
      & register_array_message
      & base_address_message
      & "."
    );
    function get_message return string is
    begin
      if message = "" then
        return base_message;
      end if;

      return base_message & " " & message & ".";
    end function;

    variable got : integer;
  begin
    read_register_top_level_irq_status(
      net => net,
      value => got,
      base_address => base_address,
      bus_handle => bus_handle
    );

    check_equal(got=>got, expected=>expected, msg=>get_message);
  end procedure;

  -- Check that the current value of the 'irq_status' register
  -- equals the given 'expected' value as a plain SLV.
  procedure check_register_top_level_irq_status_equal(
    signal net : inout network_t;
    expected : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  ) is
    constant register_array_message : string := "";
    function base_address_message return string is
    begin
      if base_address /= 0 then
        return " (at base address " & hex_image(std_logic_vector(base_address)) & ")";
      end if;

      return "";
    end function;
    constant base_message : string := (
      "Checking the 'irq_status' register"
      & register_array_message
      & base_address_message
      & "."
    );
    function get_message return string is
    begin
      if message = "" then
        return base_message;
      end if;

      return base_message & " " & message & ".";
    end function;

    variable got : reg_t;
  begin
    read_register_top_level_irq_status(
      net => net,
      value => got,
      base_address => base_address,
      bus_handle => bus_handle
    );

    check_equal(got=>got, expected=>expected, msg=>get_message);
  end procedure;
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Check that the current value of the 'irq_mask' register
  -- equals the given 'expected' value as a plain SLV casted to integer.
  procedure check_register_top_level_irq_mask_equal(
    signal net : inout network_t;
    expected : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  ) is
    constant register_array_message : string := "";
    function base_address_message return string is
    begin
      if base_address /= 0 then
        return " (at base address " & hex_image(std_logic_vector(base_address)) & ")";
      end if;

      return "";
    end function;
    constant base_message : string := (
      "Checking the 'irq_mask' register"
      & register_array_message
      & base_address_message
      & "."
    );
    function get_message return string is
    begin
      if message = "" then
        return base_message;
      end if;

      return base_message & " " & message & ".";
    end function;

    variable got : integer;
  begin
    read_register_top_level_irq_mask(
      net => net,
      value => got,
      base_address => base_address,
      bus_handle => bus_handle
    );

    check_equal(got=>got, expected=>expected, msg=>get_message);
  end procedure;

  -- Check that the current value of the 'irq_mask' register
  -- equals the given 'expected' value as a plain SLV.
  procedure check_register_top_level_irq_mask_equal(
    signal net : inout network_t;
    expected : in reg_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  ) is
    constant register_array_message : string := "";
    function base_address_message return string is
    begin
      if base_address /= 0 then
        return " (at base address " & hex_image(std_logic_vector(base_address)) & ")";
      end if;

      return "";
    end function;
    constant base_message : string := (
      "Checking the 'irq_mask' register"
      & register_array_message
      & base_address_message
      & "."
    );
    function get_message return string is
    begin
      if message = "" then
        return base_message;
      end if;

      return base_message & " " & message & ".";
    end function;

    variable got : reg_t;
  begin
    read_register_top_level_irq_mask(
      net => net,
      value => got,
      base_address => base_address,
      bus_handle => bus_handle
    );

    check_equal(got=>got, expected=>expected, msg=>get_message);
  end procedure;
  -- ---------------------------------------------------------------------------

  -- ---------------------------------------------------------------------------
  -- Check that the current value of the 'registers' register within the 'registers' register array
  -- equals the given 'expected' value as a plain SLV casted to integer.
  procedure check_register_top_level_registers_registers_equal(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    expected : in integer;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  ) is
    constant register_array_message : string := " within the 'registers[" & to_string(array_index) & "]' register array";
    function base_address_message return string is
    begin
      if base_address /= 0 then
        return " (at base address " & hex_image(std_logic_vector(base_address)) & ")";
      end if;

      return "";
    end function;
    constant base_message : string := (
      "Checking the 'registers' register"
      & register_array_message
      & base_address_message
      & "."
    );
    function get_message return string is
    begin
      if message = "" then
        return base_message;
      end if;

      return base_message & " " & message & ".";
    end function;

    variable got : integer;
  begin
    read_register_top_level_registers_registers(
      net => net,
      array_index => array_index,
      value => got,
      base_address => base_address,
      bus_handle => bus_handle
    );

    check_equal(got=>got, expected=>expected, msg=>get_message);
  end procedure;

  -- Check that the current value of the 'registers' register within the 'registers' register array
  -- equals the given 'expected' value.
  procedure check_register_top_level_registers_registers_equal(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    expected : in register_top_level_registers_registers_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  ) is
    constant register_array_message : string := " within the 'registers[" & to_string(array_index) & "]' register array";
    function base_address_message return string is
    begin
      if base_address /= 0 then
        return " (at base address " & hex_image(std_logic_vector(base_address)) & ")";
      end if;

      return "";
    end function;
    constant base_message : string := (
      "Checking the 'registers' register"
      & register_array_message
      & base_address_message
      & "."
    );
    function get_message return string is
    begin
      if message = "" then
        return base_message;
      end if;

      return base_message & " " & message & ".";
    end function;

    variable got : register_top_level_registers_registers_t;
  begin
    read_register_top_level_registers_registers(
      net => net,
      array_index => array_index,
      value => got,
      base_address => base_address,
      bus_handle => bus_handle
    );

    if got /= expected then
      failing_check(
        checker => default_checker,
        msg => p_std_msg(
          check_result => "Equality check failed",
          msg => get_message,
          ctx => (
            "Got " & to_string(to_slv(got)) & ". Expected " & to_string(to_slv(expected)) & "."
          )
        )
      );
    end if;
  end procedure;

  -- Check that the current value of the 'field' field in the 'registers' register within the 'registers' register array
  -- equals the given 'expected' value.
  procedure check_register_top_level_registers_registers_field_equal(
    signal net : inout network_t;
    array_index : in register_top_level_registers_range;
    expected : in register_top_level_registers_registers_field_t;
    base_address : in addr_t := (others => '0');
    bus_handle : in bus_master_t := regs_bus_master;
    message : in string := ""
  ) is
    constant register_array_message : string := " within the 'registers[" & to_string(array_index) & "]' register array";
    function base_address_message return string is
    begin
      if base_address /= 0 then
        return " (at base address " & hex_image(std_logic_vector(base_address)) & ")";
      end if;

      return "";
    end function;
    constant base_message : string := (
      "Checking the 'field' field in the 'registers' register"
      & register_array_message
      & base_address_message
      & "."
    );
    function get_message return string is
    begin
      if message = "" then
        return base_message;
      end if;

      return base_message & " " & message & ".";
    end function;

    variable got_reg : register_top_level_registers_registers_t := register_top_level_registers_registers_init;
    variable got : register_top_level_registers_registers_field_t := register_top_level_registers_registers_field_init;
  begin
    read_register_top_level_registers_registers(
      net => net,
      array_index => array_index,
      value => got_reg,
      base_address => base_address,
      bus_handle => bus_handle
    );
    got := got_reg.field;

    check_equal(got=>got, expected=>expected, msg=>get_message);
  end procedure;
  -- ---------------------------------------------------------------------------

end package body;
